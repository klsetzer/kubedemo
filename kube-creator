#!/usr/bin/env ruby
require 'rubygems'
require 'bundler/setup'

require 'yaml'
require 'json'
require 'awesome_print'
require 'rainbow'
require 'aws-sdk'

## Methods ##
module AwsOps
  class Cfn
    def initialize(opts = {})
      @opts = opts
      @cfn_client = Aws::CloudFormation::Client.new
    end

    def create_stack(stack_name, template_file)
      puts "Using CloudFormation template #{template_file}"
      template_body = IO.read(template_file)

      @cfn_client.create_stack({
        stack_name: stack_name,
        template_body: template_body,
        disable_rollback: true,
        capabilities: ["CAPABILITY_IAM"], # accepts CAPABILITY_IAM
      })
    end

    def stack_info(stack_name)
      stacks = @cfn_client.list_stacks({ stack_status_filter: ["CREATE_IN_PROGRESS", "CREATE_FAILED", "CREATE_COMPLETE"] }).stack_summaries
      stacks.select { |st| st.stack_name == stack_name }.first
    end

    def assert_stack_status(stack_name, desired_status)
      sleep_time = 60
      for i in 1..20
        stack_status = stack_info(stack_name)[:stack_status]
        printf("%-25s [%2s]\n", "Stack: #{stack_name} is #{stack_status}", i)
        return if stack_status == desired_status
        sleep(sleep_time -= 4)
      end
      puts "CFN stack creation failed"
    end

    private
  end
end

class KubeCluster
  def initialize(cluster_name)
    @cluster_name = cluster_name
    @cfn_template_file = "#{@cluster_name}.stack-template.json"
    @cfn_client = AwsOps::Cfn.new
  end

  def create_cluster
    Dir.mkdir(@cluster_name)
    Dir.chdir(@cluster_name) do
      step('Initialize Kube config') { puts KubeAws.init(@cluster_name) }
      step('Fix cluster config')     { puts fix_cluster_config }
      step('Render CFN template')    { puts KubeAws.render }
      step('Validate config files')  { puts KubeAws.validate }
      step('Export CFN template')    { puts KubeAws.export_cfn_template }
      step('Fix CFN template')       { puts fix_cfn_template }
      File.symlink('../kube-creator', 'kube-creator')
      step('Create CFN stack')       { puts create_cfn_stack }
    end
  end

  private

  def create_cfn_stack
    stack_name = @cluster_name
    @cfn_client.create_stack(stack_name, @cfn_template_file)
    @cfn_client.assert_stack_status(stack_name, 'CREATE_COMPLETE')
  end


  def fix_cfn_template
    @cfn = JSON.parse(IO.read(@cfn_template_file))
    @cfn['Description'] = "kube demo #{@cluster_name}"
    @cfn['Resources']['AutoScaleWorker']['Properties']['MinSize'] = "1"
    @cfn['Resources']['AutoScaleWorker']['Properties']['DesiredCapacity'] = "1"
    @cfn['Resources']['AutoScaleWorker']['UpdatePolicy']['AutoScalingRollingUpdate']['MinInstancesInService'] = "1"
    File.open(@cfn_template_file, "w") { |file| file.write JSON.pretty_generate(@cfn) }
    "#{@cfn['Resources'].count} resources in CFN template"
  end

  def config
    @config ||= YAML.load_file('cluster.yaml')
  end

  def fix_cluster_config
    config['createRecordSet'] = true
    config['hostedZone'] = 'aws.liquidchicken.org'
    config['recordSetTTL'] = 60
    config['workerCount'] = 12
    File.open('cluster.yaml', "w") { |file| file.write config.to_yaml }
    config.to_yaml
  end

  def step(name)
    @step_num ||= 1
    puts Rainbow("===> Step[#{@step_num}]: #{name}").blue
    yield
    puts "\n\n"
    @step_num += 1
  end

end

class Kubectl
  def self.get_nodes
    %x{ kubectl --kubeconfig=kubeconfig get nodes }
  end

  def self.cluster_info
    %x{ kubectl --kubeconfig=kubeconfig cluster-info }
  end
end

class KubeAws
  def self.init(cluster_name)
    %x{
    kube-aws init --cluster-name=#{cluster_name} \
    --external-dns-name=#{cluster_name}.aws.liquidchicken.org \
    --region=us-east-1 \
    --availability-zone=us-east-1c \
    --key-name=lc-us-east-1 \
    --kms-key-arn="arn:aws:kms:us-east-1:437443400885:key/819a0470-5371-4217-942e-86abd5e3c979"
    }
  end

  def self.render
    %x{ kube-aws render }
  end

  def self.validate
    %x{ kube-aws validate }
  end

  def self.export_cfn_template
    %x{ kube-aws up --export }
  end
end

def usage
  puts 'create_kube_cluster <cluster_name>'
  puts '  KUBE_CLUSTER_NAME environment variable must be set'
end

## Main ##
cluster_name = ENV['KUBE_CLUSTER_NAME']
usage if cluster_name.empty?

kc = KubeCluster.new(cluster_name)
kc.create_cluster
